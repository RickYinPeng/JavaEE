<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<!-- 写sql语句 
	namespace :命名空间 user.findUserById
				     order.findUserById

-->

<mapper namespace="yp.itcast.mybatis.mapper.UserMapper">
	<sql id="selector">
		select * from user	
	</sql>

	<!-- 通过id查询一个用户 -->
	<select id="findUserById" parameterType="Integer" resultType="User">
		select * from user where id = #{v}
	</select>
	
	<!-- 根据用户名称模糊查询用户列表
			parameterType:参数类型：可以直接写String|Integer，因为在mybits中这些的路径已经封装好了
			resultType：返回值类型，如果是一个返回值就写就行了，如果是List，那么写List泛型的返回值类型
		
		#{里面随便写}:select * from user where id = #{v}  占位符 ？== '五'
		${只能写value}:select * from user where username like '%${}%';   字符串拼接 
			
	 -->
	<select id="findUserByUsername" parameterType="String" resultType="yp.itcast.mybatis.pojo.User">
		select * from user where username like "%"#{value}"%";
	</select>
	
	<!-- 添加用户 -->
	<insert id="insertUser" parameterType="yp.itcast.mybatis.pojo.User">
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user(username,birthday,address,sex) values(#{username},#{birthday},#{address},#{sex})
	</insert>
	
	<!-- 更新用户 -->
	<update id="UpdateUserById" parameterType="yp.itcast.mybatis.pojo.User">
		update user 
		set username=#{username},sex=#{sex},birthday=#{birthday},address=#{address}
		where id = #{id}
	</update>
	
	<!-- 删除用户 -->
	<delete id="deleteUserById" parameterType="Integer">
		delete from user where id = #{id}
	</delete>
	
	<!-- 根据用户名模糊查询 -->
	<select id="findUserByQueryVo" parameterType="QueryVo" resultType="yp.itcast.mybatis.pojo.User">
		select * from user where username like "%"#{user.username}"%";
	</select>
	
	<!--输出参数之简单类型  -->
	<select id="countUser" resultType="Integer">
		select count(1) from user
	</select>
	
	<!-- 根据性别和名字查询用户
			where:可以去掉第一个前And （注意：只能去掉前And）
				     前|后(And也可以放在sex = #{sex}后面（sex = #{sex} and）)
	
	 -->
	<select id="selectUserBySexAndUsername" parameterType="User" resultType="User">
		<include refid="selector"/>
		<where>
		<if test="sex != null and sex != '' ">
			sex = #{sex} 
		</if>
		<if test="username != null and username != '' ">
			 and username = #{username} 
		</if>
		</where>	
	</select>
	
	<!-- 多个Id(1,2,3) -->
	<select id="selectUserByIds" parameterType="QueryVo" resultType="User">
		<include refid="selector"/>
		<where>
			id in
			<foreach collection="list" item="id" separator="," open="(" close=")">
				#{id}
			</foreach>
		</where>
	</select>
	
	<!-- 一对多关联
	public List<User> selectUserList();
	 -->
	 <resultMap type="User" id="user">
	 	<id column="uid" property="id"/>
	 	<result column="username" property="username"/>
	 	<!-- ofType:List集合中的泛型类型（List集合每一个元素的类型） -->
	 	<collection property="ordersList" ofType="Orders">
	 		<id column="oid" property="id"/>
	 		<result column="number" property="number"/>
	 	</collection>
	 </resultMap>
	 <select id="selectUserList" resultMap="user">
	 SELECT 
	 	u.username		,
	 	o.id 		oid	,
	 	o.user_id	uid	,
	 	o.number		,
	 	o.createtime 
	 FROM USER u LEFT JOIN orders o 
	 ON o.user_id=u.id;
	 </select>
	

</mapper> 





